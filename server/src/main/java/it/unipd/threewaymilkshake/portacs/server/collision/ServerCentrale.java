/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unipd.threewaymilkshake.portacs.server.collision;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TimerTask;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class ServerCentrale {

    Map templateMappa;
    public BlockingQueue<Connection> incomingConnections;
    LinkedList<Connection> currentConnections = new LinkedList<Connection>();

    
    public ServerCentrale(BlockingQueue<Connection> incomingConnections, Map templateMappa) {
        this.incomingConnections = incomingConnections;
        this.templateMappa = templateMappa;
    }

    /*public void startServer() {

        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
        executor.scheduleAtFixedRate(() -> organizer(), 250L, 500L, TimeUnit.MILLISECONDS);

    }*/

    public void organizer(ExecutorService executor) {
        System.out.println("***");
        
        while (!incomingConnections.isEmpty()) {
            currentConnections.add(incomingConnections.poll());        
        }

        generateMatrix(currentConnections);

        HashMap<Point, LinkedList<Connection>> collisionDetected = Collision.CollisionDetector(currentConnections);
        
        Collision.printCollisionDetected(collisionDetected);

        Solver solver = new Solver(collisionDetected);

        solver.collisionSolver();
        
        solver.printResponse();
        
        if(!collisionDetected.isEmpty())
            executor.shutdown();

        System.out.println("***");
        currentConnections.clear();
    }

    public void generateMatrix(LinkedList<Connection> currentConnections) {
        
        for(Connection con : currentConnections)
        {
            System.out.println("Ricevuto muletto " + con.id + con.position.printPosition() + " nextTwoMoves: ");
            con.printNextMoves();
        }
        


        int[][] map = {
            { 0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0 }
        };

        for(Connection con : currentConnections)
        {
            map[con.position.x][con.position.y] = 1;
        }

        for(int i = 0; i < 10; i++) 
        {
            for(int j = 0; j < 10; j++)
            {
                System.out.printf(map[i][j] + " ");
            }
            System.out.printf("\n");
        }
        

    }


    

}
